'''
Tutorial Window
Author: Guy Meyer
Date of Creation: July 31 2020

UI to explain the functionality of the HeartView application. This UI should
popup with focus upon boot, and be available to the user at all times.
'''

from PyQt5.QtWidgets import QApplication
from PyQt5 import QtGui, QtWidgets, QtCore

import qtawesome as qta # fontawesome


## New window to display PDF Report options
class TutorialWindow(QtGui.QMainWindow):

    def __init__(self, parent):
        super(TutorialWindow, self).__init__(parent)
        self.setWindowTitle("Tutorial Page")

        # Create central widget
        self.centralWidget = QtGui.QWidget(self)

        # setup main layout
        self.mainLayout = QtGui.QVBoxLayout()
        self.centralWidget.setLayout(self.mainLayout)

        # make scrollable
        self.scroll = QtWidgets.QScrollArea()
        
        self.scroll.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        self.scroll.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.scroll.setWidgetResizable(True)
        self.scroll.setWidget(self.centralWidget)

        self.setCentralWidget(self.scroll) 

        # fix window size
        self.setFixedSize(640, 480)

        ## UI Fonts
        self.family = "Times"
        labelFamily = "Arial"
        bigLabelFont = QtGui.QFont(labelFamily, 20)
        smallLabelFont = QtGui.QFont(labelFamily, 16)
        tinyLabelFont = QtGui.QFont(labelFamily, 12)
        errorFont = QtGui.QFont(labelFamily, 16, weight=QtGui.QFont.Bold)

        ## UI Widgets

        # Title
        self.mainLabel = QtWidgets.QLabel("Welcome to HeartView")
        self.mainLabel.setFont(bigLabelFont)
        self.mainLabel.resize(100, 50)
        self.mainLabel.setStyleSheet("margin: 1em 0em;")

        # Tutorial
        self.tutorialLabel = QtWidgets.QLabel(
            'Develop and test pacemaker in real-time! \n\n\
                Here\'s what you need to know...\n\
                    - The plots split up signals from the Atrium and Ventricle\n\
                    \tAtrium signals are plotted in the upper graph\n\
                    \tVentricle signals in the lower graph\n\
                    - In each plot two signals are plotted:\n\
                    \tHeart signals in RED (natural signals)\n\
                    \tPacemaker signals in BLUE (generated by you)\n\
                    - Use the Control Panel titled "Natural Heart Characteristics" to bulid the test routine you want (Remember! The test routine wont take affect until you press "DISPATCH TEST")\n\
                    - The characteristics noted under "Active Test Routine" are the pacing characteristics currently running on the heart\n\
                    - You can find connected serial devices in the serial dropdown menu\n\
                    - The buttons in the top right function as follows (from left to right):\n\
                    \tHELP - Brings up this tutorial window\n\
                    \tPRINT - Generate a PDF report of what\'s on the screen right now\n\
                    \tSTOP - Pause the graph (useful for closer inspection)\n\
                    \tSTART - Start the paused graph\n\
                    \tRESET - Reset the graph when zoomed or moved (very helpful command)\n\
                    \n\
                Here\'s how to get started...\n\
                    1) Connect the heart (Nucleo F446RE) via USB to this computer\n\
                    2) Find the Nucleo in the list of devices\n\
                    \tIf you can\'t find it, wait and click the refresh button to its left\n\
                    3) Once selected press connect\n\
                    \tYou should see a "Serial Enabled" message in the status bar\n\
                    4) Ensure that the on-board LEDs of the heart are blinking \n\
                    5) Change the "Natural Heart Characteristics" and dispatch a test to see that the LEDs change pacing style\n\
                    6) Connect the pacemaker (FRDM K64F) to a computer \n\
                    7) Connect the cables provided in the box between the board to allow the heart and pacemaker to share signals\n\
                    8) Start developing! As you begin to generating pulses on the pacemaker you will see them in BLUE in the corresponding plot'
            )
        self.tutorialLabel.setFont(smallLabelFont)
        self.tutorialLabel.setWordWrap(True)   

        # Exit button
        qta_print = qta.icon('fa.close')
        self.closeButton = QtWidgets.QPushButton(qta_print, "Close")
        self.closeButton.setEnabled(True)

        ## setup layout
        self.__setupLayout()

        ## make SIGNAL-SLOT connections
        self.__connectionsList()

    def __setupLayout(self):

        verticalSpacer = QtWidgets.QSpacerItem(150, 10, QtWidgets.QSizePolicy.Expanding)

        # Window Title
        self.mainLayout.addWidget(self.mainLabel)
        self.mainLayout.setAlignment(QtCore.Qt.AlignTop)

        # Text
        self.mainLayout.addWidget(self.tutorialLabel)

        self.mainLayout.addItem(verticalSpacer)

        # Submit Button
        self.mainLayout.addWidget(self.closeButton)

        # add a stretchable space to the bottom of the layout
        self.mainLayout.addStretch(1)

    def __connectionsList(self):
        
        # Generate Report
        self.closeButton.clicked.connect(self.closeWindow)
        
    ### SLOT FUNCTIONS ###

    # close tutorial window
    @QtCore.pyqtSlot()
    def closeWindow(self):
        self.close()

    ### ERROR HANDLER FUNCTIONS ###

    def __errorIndicators(self):
        pass




